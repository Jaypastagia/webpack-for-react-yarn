const webpack = require('webpack'); // Module bundler
const HtmlWebpackPlugin = require('html-webpack-plugin'); // generate an HTML file for your application, or you can provide a template

const port = process.env.PORT || 3000;

module.exports = {
  // Webpack configuration goes here
  mode: 'development', // Development Mode optimized for speed and developer experience… Production defaults will give you a set of defaults useful for deploying your application
  entry: './src/index.js', // entry point of your application; this is where your React app lives and where the bundling process will begin
  output: {
    filename: 'bundle.[hash].js', // filename of the bundled application. The [hash] portion of the filename will be replaced by a hash generated by Webpack every time your application changes and is recompiled
    publicPath: '/'  // HMR
  },
  resolve: {
    alias: {
      "react-dom": "@hot-loader/react-dom",
    },
  }, // HMR
  devtool: 'inline-source-map', // create source maps to help you with debugging of your application

  module: {  // types of modules your application will include
    rules: [ // handle each different type of module

      /* First Rule - test for files with a .js extension excluding the node_modules directory and use Babel, 
      via babel-loader, to transpile down to vanilla JavaScript */
      {
        test: /\.(js)$/,
        exclude: /node_modules/,
        use: ['babel-loader']
      },

      /* Second Rule - test for CSS files with a .css extension. 
      Here we use two loaders, style-loader and css-loader, to handle our CSS files */
      {
        test: /\.css$/,
        use: [
          {
            loader: 'style-loader'
          },
          {
            loader: 'css-loader',
            options: {
              modules: true, // gives us the ability to use import Styles from ‘./styles.css’
              localsConvention: 'camelCase', // .primary-button {...} ==> import { primaryButton } from './styles.css'
              sourceMap: true
            }
          }
        ]
      }
    ]
  },

  plugins: [
    /* accepts an object with different options. 
    In our case we specify the HTML template we will be using and the favicon */
    new webpack.HotModuleReplacementPlugin(), // HMR
    new HtmlWebpackPlugin({
      template: 'public/index.html',
      // favicon: 'public/favicon.ico'
    })
  ],

  devServer: {
    host: 'localhost',
    port: port,
    historyApiFallback: true, // index.html page will likely have to be served in place of any 404 responses
    open: true,
    hot: true // HMR
  }
};